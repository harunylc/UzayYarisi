//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/CarController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarController"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""f42a3b05-d49d-429e-8d44-93aa57732e2d"",
            ""actions"": [
                {
                    ""name"": ""P1_Throtle"",
                    ""type"": ""Value"",
                    ""id"": ""d2605af7-e573-49ba-9cd1-873505956530"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""P2_Throtle"",
                    ""type"": ""Value"",
                    ""id"": ""dade1f50-283e-44c1-873c-b51e41e64366"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Options"",
                    ""type"": ""Button"",
                    ""id"": ""cc5d258a-f40b-4220-8ace-f485b3ca74a8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45f44813-f68b-456f-ab9f-7ce9946da0c6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1_Throtle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c650cad7-92f9-437b-9390-230b6515e6ba"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""P1_Throtle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e0dcb35-0f11-4829-9151-6c72a8fb9448"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""P2_Throtle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e97ff5e1-0495-4ae9-a6ca-e58314c78b7c"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2_Throtle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61898237-25ee-4baf-8515-2ca4ea641ea3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_P1_Throtle = m_Move.FindAction("P1_Throtle", throwIfNotFound: true);
        m_Move_P2_Throtle = m_Move.FindAction("P2_Throtle", throwIfNotFound: true);
        m_Move_Options = m_Move.FindAction("Options", throwIfNotFound: true);
    }

    ~@CarController()
    {
        UnityEngine.Debug.Assert(!m_Move.enabled, "This will cause a leak and performance issues, CarController.Move.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
    private readonly InputAction m_Move_P1_Throtle;
    private readonly InputAction m_Move_P2_Throtle;
    private readonly InputAction m_Move_Options;
    public struct MoveActions
    {
        private @CarController m_Wrapper;
        public MoveActions(@CarController wrapper) { m_Wrapper = wrapper; }
        public InputAction @P1_Throtle => m_Wrapper.m_Move_P1_Throtle;
        public InputAction @P2_Throtle => m_Wrapper.m_Move_P2_Throtle;
        public InputAction @Options => m_Wrapper.m_Move_Options;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void AddCallbacks(IMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
            @P1_Throtle.started += instance.OnP1_Throtle;
            @P1_Throtle.performed += instance.OnP1_Throtle;
            @P1_Throtle.canceled += instance.OnP1_Throtle;
            @P2_Throtle.started += instance.OnP2_Throtle;
            @P2_Throtle.performed += instance.OnP2_Throtle;
            @P2_Throtle.canceled += instance.OnP2_Throtle;
            @Options.started += instance.OnOptions;
            @Options.performed += instance.OnOptions;
            @Options.canceled += instance.OnOptions;
        }

        private void UnregisterCallbacks(IMoveActions instance)
        {
            @P1_Throtle.started -= instance.OnP1_Throtle;
            @P1_Throtle.performed -= instance.OnP1_Throtle;
            @P1_Throtle.canceled -= instance.OnP1_Throtle;
            @P2_Throtle.started -= instance.OnP2_Throtle;
            @P2_Throtle.performed -= instance.OnP2_Throtle;
            @P2_Throtle.canceled -= instance.OnP2_Throtle;
            @Options.started -= instance.OnOptions;
            @Options.performed -= instance.OnOptions;
            @Options.canceled -= instance.OnOptions;
        }

        public void RemoveCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveActions @Move => new MoveActions(this);
    public interface IMoveActions
    {
        void OnP1_Throtle(InputAction.CallbackContext context);
        void OnP2_Throtle(InputAction.CallbackContext context);
        void OnOptions(InputAction.CallbackContext context);
    }
}
